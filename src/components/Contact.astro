---
import { Icon } from "astro-iconify";
import Card from "./Card.astro";

interface Props {
  email: string;
}

const { email } = Astro.props;
---

<Card class="group/contact">
  <div class="flex w-full flex-col items-center justify-center pt-10">
    <p class="heading text-2xl">Contact me</p>
    <div class="flex flex-row gap-1">
      <p>Contact me at</p>
      <a href={`mailto:${email}`} class="font-semibold hover:fancy">{email}</a>
    </div>
    <p>or give me a bell using the form below</p>

    <form
      class="m-8 flex w-full flex-col items-center justify-center gap-8 rounded border-2 border-black/5 p-2 md:p-8"
      id="contact-form"
      action="javascript:void(0)"
    >
      <div class="relative w-full">
        <input
          id="name"
          name="name"
          type="text"
          class="peer mx-0 my-4 w-full rounded border-0 border-b-2 border-gray-300 p-4 text-black placeholder-transparent ring-black focus:shadow-lg focus:ring-1 dark:bg-slate-600 dark:text-white"
          placeholder="John Doe"
          required
        />
        <label
          for="name"
          class="absolute -top-2.5 left-2 text-xl text-gray-800 transition-all peer-placeholder-shown:top-7 peer-placeholder-shown:text-xl peer-placeholder-shown:text-gray-800 peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-gray-600 dark:text-white dark:peer-placeholder-shown:text-white dark:peer-focus:text-white"
          >Name</label
        >
      </div>

      <div class="relative w-full">
        <input
          id="email"
          name="email"
          type="email"
          class="peer mx-0 my-4 w-full rounded border-0 border-b-2 border-gray-300 p-4 text-black placeholder-transparent ring-black focus:shadow-lg focus:ring-1 dark:bg-slate-600 dark:text-white"
          placeholder="john@doe.com"
          required
        />
        <label
          for="email"
          class="absolute -top-2.5 left-2 text-xl text-gray-800 transition-all peer-placeholder-shown:top-7 peer-placeholder-shown:text-xl peer-placeholder-shown:text-gray-800 peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-gray-600 dark:text-white dark:peer-placeholder-shown:text-white dark:peer-focus:text-white"
          >Email</label
        >
      </div>

      <div class="relative w-full">
        <textarea
          id="message"
          name="message"
          class="peer mx-0 my-4 w-full rounded border-0 border-b-2 border-gray-300 p-4 text-black placeholder-transparent focus:shadow-lg dark:bg-slate-600 dark:text-white"
          placeholder=" "
          required></textarea>
        <label
          for="message"
          class="absolute -top-2.5 left-2 text-xl text-gray-800 transition-all peer-placeholder-shown:top-7 peer-placeholder-shown:text-xl peer-placeholder-shown:text-gray-800 peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-gray-600 dark:text-white dark:peer-placeholder-shown:text-white dark:peer-focus:text-white"
          >Your Message</label
        >
      </div>

      <div
        id="error-msg"
        class="hidden w-full flex-col justify-center gap-2 rounded border-2 border-red-600 p-4 text-center"
      >
        <p class="w-full text-center text-xl font-medium">Oops!</p>
        <p class="w-full text-center text-sm">
          Ensure all fields have the correct value and try again
        </p>
      </div>

      <button
        id="submit"
        class="group/btn flex h-fit w-full flex-grow items-center justify-center gap-4 rounded-xl p-2 text-xl shadow-md transition-all hover:scale-105 hover:bg-white hover:shadow-xl active:scale-90 group-hover:bg-white dark:shadow-slate-700 dark:hover:!bg-slate-800 dark:hover:shadow-slate-800 dark:hover:outline dark:hover:outline-1 dark:hover:outline-slate-600 dark:group-hover:bg-slate-600"
        >Send
        <Icon
          id="send-icon"
          name="iconamoon:send-fill"
          size={24}
          class="group-hover/btn:animate-pulse"
        />
      </button>
    </form>

    <div
      id="success-msg"
      class="m-8 hidden w-full flex-col justify-center gap-8 rounded border-2 border-black/5 p-8 text-center"
    >
      <p class="w-full text-center text-3xl font-medium">
        Thanks for contacting me!
      </p>
      <p>I'll get back to you as soon as possible</p>

      <button
        id="send-another"
        class="group/btn flex h-fit flex-grow items-center justify-center gap-4 rounded-xl p-2 text-xl shadow-md transition-all hover:scale-105 hover:bg-white hover:shadow-xl active:scale-90 group-hover:bg-white dark:shadow-slate-700 dark:hover:!bg-slate-800 dark:hover:shadow-slate-800 dark:hover:outline dark:hover:outline-1 dark:hover:outline-slate-600 dark:group-hover:bg-slate-600"
      >
        Want to send me another message?
      </button>
    </div>
  </div>
</Card>

<script>
  const contactForm = document.getElementById(
    "contact-form",
  ) as HTMLFormElement;
  const contactFormBtn = document.getElementById("submit") as HTMLButtonElement;
  const successMsg = document.getElementById("success-msg") as HTMLElement;
  const sendAnotherBtn = document.getElementById(
    "send-another",
  ) as HTMLButtonElement;
  const errorMsg = document.getElementById("error-msg") as HTMLElement;
  const sendIcon = document.getElementById("send-icon") as HTMLElement;

  /**
   * Show the error message and enable the contact form button.
   */
  function showErrorMsg(): void {
    toggleVisibility(errorMsg, true);
    contactFormBtn.disabled = false;
  }

  /**
   * Toggle the visibility of a given HTML element.
   * @param {HTMLElement | null} element - The HTML element to toggle visibility of.
   * @param {boolean} isVisible - Whether the element should be visible.
   */
  function toggleVisibility(
    element: HTMLElement | null,
    isVisible: boolean,
  ): void {
    if (element) {
      element.classList.toggle("hidden", !isVisible);
      element.classList.toggle("flex", isVisible);
    }
  }

  /**
   * Handle the form submission event.
   * @param {SubmitEvent} e - The form submission event.
   * @returns {Promise<void>}
   */
  async function submit(e: SubmitEvent): Promise<void> {
    e.preventDefault();
    toggleVisibility(errorMsg, false);
    contactFormBtn.disabled = true;
    contactFormBtn.innerText = "Sending...";
    const formData = new FormData(contactForm);

    try {
      const response = await fetch("/api/contact", {
        method: "POST",
        body: formData,
      });

      if (response.status !== 200) {
        showErrorMsg();
        return;
      }

      toggleVisibility(contactForm, false);
      toggleVisibility(successMsg, true);
      contactFormBtn.disabled = false;
      contactFormBtn.innerHTML = "Send" + sendIcon?.outerHTML;
    } catch (error) {
      console.error("Error:", error);
      showErrorMsg();
    }
  }

  sendAnotherBtn?.addEventListener("click", () => {
    toggleVisibility(contactForm, true);
    toggleVisibility(successMsg, false);
  });

  contactForm?.addEventListener("submit", submit);
</script>
