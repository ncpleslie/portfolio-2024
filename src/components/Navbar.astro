---
import { Icon } from "astro-iconify";
import { type Link } from "../types/link";

interface Props {
  links: Link[];
}

const { links } = Astro.props;
---

<div
  class="flex min-h-[120px] w-full flex-row items-start justify-center gap-16"
>
  {
    links.map((link) => (
      <a
        id={`${link.id}_nav`}
        title={link.alt}
        class="flex flex-col items-center justify-center gap-0 rounded-xl text-xl text-transparent transition-all duration-200 hover:text-black active:text-black hover:md:pb-4 hover:md:pt-8"
        href={link.link}
      >
        {link.title}
        <Icon class="h-10 w-10 text-black" name={link.icon} />
      </a>
    ))
  }
</div>

<script define:vars={{ links }}>
const hoverStyle = [
  "lg:px-8",
  "lg:pb-4",
  "lg:pt-8",
  "lg:indent-0",
  "lg:text-black",
];

const testStyle = ["text-transparent"];

window.onload = () => {
  const elements = links.map((link) => document.getElementById(link.id));
  window.addEventListener("scroll", () =>
    handleUpdatingActiveNavItems(elements),
  );
  handleUpdatingActiveNavItems(elements);
};

const handleUpdatingActiveNavItems = (elements) => {
  elements.forEach((element) => {
    const middle = window.innerHeight / 2 + window.scrollY;
    const scrolledToElement = document.getElementById(`${element.id}_nav`);
    if (
      middle > element.offsetTop &&
      middle < element.offsetTop + element.offsetHeight
    ) {
      scrolledToElement.classList.remove(...testStyle);
      scrolledToElement.classList.add(...hoverStyle);
    } else {
      scrolledToElement.classList.add(...testStyle);
      scrolledToElement.classList.remove(...hoverStyle);
    }
  });
};
</script>
